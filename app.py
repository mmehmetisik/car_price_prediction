import streamlit as st
import pandas as pd
import numpy as np
import pickle

# Uygulama KonfigÃ¼rasyonu
st.set_page_config(
   page_title="AraÃ§ Fiyat Tahmini",
   page_icon="ğŸš—",
   layout="wide"
)

# Model ve feature columns yÃ¼kleme
model_path = "models/final_model.pkl"
with open(model_path, "rb") as file:
   model = pickle.load(file)

feature_columns_path = "models/feature_columns.pkl"
with open(feature_columns_path, "rb") as file:
   feature_columns = pickle.load(file)

# Ana baÅŸlÄ±k
st.title('ğŸš— AraÃ§ Fiyat Tahmin UygulamasÄ±')
st.markdown("---")

# Yan panel (sidebar) iÃ§in aÃ§Ä±klama
st.sidebar.header("Uygulama HakkÄ±nda")
st.sidebar.markdown("""
### AraÃ§ Fiyat Tahmin Sistemi

Bu uygulama, geliÅŸmiÅŸ makine Ã¶ÄŸrenmesi algoritmalarÄ± kullanarak araÃ§ fiyat tahmini yapar.

**Ã–zellikler:**
- GerÃ§ek piyasa verilerine dayalÄ± tahminler
- 50'den fazla Ã¶zellik analizi
- AnlÄ±k fiyat hesaplama
- DetaylÄ± araÃ§ Ã¶zellikleri analizi

**Veri KaynaÄŸÄ±:** 
- USA Cars Dataset
- 2,500+ araÃ§ verisi
- GÃ¼ncel piyasa analizi
""")

# Ana panel - KullanÄ±cÄ± girdileri
st.header('AraÃ§ Ã–zelliklerini Giriniz')

# 3 sÃ¼tunlu layout
col1, col2, col3 = st.columns(3)

# Ä°lk sÃ¼tun
with col1:
   brand = st.selectbox('Marka', ['ford', 'chevrolet', 'toyota', 'honda', 'bmw', 'nissan', 'dodge', 'mercedes-benz'])
   model_name = st.text_input("Model AdÄ± (Opsiyonel)")
   year = st.slider('Model YÄ±lÄ±', 2000, 2024, 2020)
   mileage = st.number_input('Kilometre', min_value=0, max_value=300000, value=50000, step=1000)

# Ä°kinci sÃ¼tun
with col2:
   color = st.selectbox('Renk', ['white', 'black', 'silver', 'gray', 'blue', 'red'])
   state = st.selectbox('Eyalet', ['california', 'florida', 'texas', 'new york', 'pennsylvania'])

# ÃœÃ§Ã¼ncÃ¼ sÃ¼tun
with col3:
   title_status = st.selectbox('AraÃ§ Durumu', ['clean vehicle', 'salvage insurance loss'])

# KullanÄ±cÄ± verisini DataFrame'e dÃ¶nÃ¼ÅŸtÃ¼rme
input_data = pd.DataFrame({
   "year": [year],
   "mileage": [mileage],
   "brand": [brand],
   "color": [color],
   "title_status": [title_status],
   "state": [state]
})

# TÃ¼retilmiÅŸ Ã¶zellikleri ekleme
input_data['car_age'] = 2024 - input_data['year']
input_data['avg_km_per_year'] = input_data['mileage'] / input_data['car_age']
input_data['is_premium'] = input_data['brand'].isin(['bmw', 'mercedes-benz']).astype(int)

# One-Hot Encoding uygulama
input_data = pd.get_dummies(input_data)

# Eksik kolonlarÄ± modelin beklediÄŸi formata getirme
for col in feature_columns:
   if col not in input_data.columns:
       input_data[col] = 0

# SÃ¼tunlarÄ± modele uygun hale getirme
input_data = input_data[feature_columns]

# Tahmin butonu
if st.button('Fiyat Tahmini Yap', type='primary'):
   try:
       # Tahmin
       prediction = model.predict(input_data)[0]
       
       # SonuÃ§ gÃ¶sterimi
       st.success(f'Tahmini Fiyat: ${prediction:,.2f}')
       
       # DetaylÄ± aÃ§Ä±klama
       st.markdown("---")
       st.markdown("### FiyatÄ± Etkileyen FaktÃ¶rler")
       col1, col2 = st.columns(2)
       
       with col1:
           st.write(f"- AraÃ§ YaÅŸÄ±: {2024 - year} yÄ±l")
           st.write(f"- Kilometre: {mileage:,} km")
           st.write(f"- Premium Marka: {'Evet' if brand in ['bmw', 'mercedes-benz'] else 'HayÄ±r'}")
           
       with col2:
           st.write(f"- Durum: {title_status}")
           st.write(f"- Lokasyon: {state}")
           st.write(f"- Renk: {color}")
           
   except Exception as e:
       st.error(f"Bir hata oluÅŸtu: {str(e)}")
       st.error("LÃ¼tfen tÃ¼m alanlarÄ± doÄŸru ÅŸekilde doldurunuz.")
