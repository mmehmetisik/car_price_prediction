import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="AraÃ§ Fiyat Tahmini",
    page_icon="ğŸš—",
    layout="wide"
)

# Model ve bileÅŸenleri yÃ¼kleme fonksiyonu
@st.cache_resource
def load_model_and_components():
    model_path = os.path.join('models', 'final_model.pkl')
    feature_columns_path = os.path.join('models', 'feature_columns.pkl')
    scaler_path = os.path.join('models', 'scaler.pkl')
    
    with open(model_path, 'rb') as file:
        model = pickle.load(file)
    with open(feature_columns_path, 'rb') as file:
        feature_columns = pickle.load(file)
    with open(scaler_path, 'rb') as file:
        scaler = pickle.load(file)
    return model, feature_columns, scaler

# Ana baÅŸlÄ±k
st.title('ğŸš— AraÃ§ Fiyat Tahmini')
st.markdown("---")

# Yan panel
st.sidebar.header("Uygulama HakkÄ±nda")
st.sidebar.markdown("""
### AraÃ§ Fiyat Tahmin Sistemi

Bu uygulama, geliÅŸmiÅŸ makine Ã¶ÄŸrenmesi algoritmalarÄ± kullanarak araÃ§ fiyat tahmini yapar.

**Ã–zellikler:**
- GerÃ§ek piyasa verilerine dayalÄ± tahminler
- 50'den fazla Ã¶zellik analizi
- AnlÄ±k fiyat hesaplama
- DetaylÄ± araÃ§ Ã¶zellikleri analizi

**Veri KaynaÄŸÄ±:** 
- USA Cars Dataset
- 2,500+ araÃ§ verisi
- GÃ¼ncel piyasa analizi
""")

try:
    # Model ve bileÅŸenleri yÃ¼kle
    model, feature_columns, scaler = load_model_and_components()
    
    # Marka, renk ve eyalet seÃ§eneklerini feature_columns'dan al
    brand_features = sorted([col.replace('brand_', '') for col in feature_columns if col.startswith('brand_')])
    color_features = sorted([col.replace('color_', '') for col in feature_columns if col.startswith('color_')])
    state_features = sorted([col.replace('state_', '') for col in feature_columns if col.startswith('state_')])
    
    # Ana panel - KullanÄ±cÄ± girdileri
    st.header('AraÃ§ Ã–zelliklerini Giriniz')
    
    # 2 sÃ¼tunlu layout
    col1, col2 = st.columns(2)
    
    # Ä°lk sÃ¼tun
    with col1:
        brand = st.selectbox('Marka', brand_features)
        year = st.slider('Model YÄ±lÄ±', 2000, 2024, 2020)
        mileage = st.number_input('Kilometre', min_value=0, max_value=300000, value=50000, step=1000)
    
    # Ä°kinci sÃ¼tun
    with col2:
        color = st.selectbox('Renk', color_features)
        title_status = st.selectbox('AraÃ§ Durumu', ['clean vehicle'])
        state = st.selectbox('Eyalet', state_features)
    
    # Tahmin butonu
    if st.button('Fiyat Tahmini Yap', type='primary'):
        # BoÅŸ DataFrame oluÅŸtur
        input_data = pd.DataFrame(columns=feature_columns, index=[0])
        input_data.fillna(0, inplace=True)
        
        # Temel Ã¶zellikleri hesapla
        car_age = 2024 - year
        avg_km_per_year = mileage / car_age if car_age > 0 else 0
        
        # NÃ¼merik deÄŸerleri ata
        numeric_input = pd.DataFrame({
            'year': [year],
            'mileage': [mileage],
            'car_age': [car_age],
            'avg_km_per_year': [avg_km_per_year],
            'price_per_km': [0]  # BaÅŸlangÄ±Ã§ deÄŸeri
        })
        
        # NÃ¼merik deÄŸerleri Ã¶lÃ§ekle
        numeric_cols = ['year', 'mileage', 'car_age', 'avg_km_per_year', 'price_per_km']
        scaled_numeric = scaler.transform(numeric_input)
        
        # Ã–lÃ§eklenmiÅŸ deÄŸerleri input_data'ya aktar
        for idx, col in enumerate(numeric_cols):
            input_data[col] = scaled_numeric[0][idx]
        
        # Kategorik deÄŸerleri ata
        input_data[f'brand_{brand}'] = 1
        input_data[f'color_{color}'] = 1
        input_data[f'state_{state}'] = 1
        input_data['title_status_clean vehicle'] = 1
        
        # Ã–zel flagler
        input_data['is_premium_1'] = 1 if brand in ['bmw', 'mercedes-benz'] else 0
        input_data['is_popular_color_1'] = 1 if color in ['white', 'black', 'silver', 'gray'] else 0
        input_data['clean_title_score_1'] = 1
        
        # Tahmin
        prediction = model.predict(input_data)[0]
        
        # SonuÃ§ gÃ¶sterimi
        st.success(f'Tahmini Fiyat: ${prediction:,.2f}')
        
        # DetaylÄ± aÃ§Ä±klama
        st.markdown("---")
        st.markdown("### FiyatÄ± Etkileyen FaktÃ¶rler")
        detail_col1, detail_col2 = st.columns(2)
        
        with detail_col1:
            st.write(f"- AraÃ§ YaÅŸÄ±: {car_age} yÄ±l")
            st.write(f"- Kilometre: {mileage:,} km")
            st.write(f"- YÄ±llÄ±k Ort. Kilometre: {avg_km_per_year:,.0f} km")
            
        with detail_col2:
            st.write(f"- Premium Marka: {'Evet' if input_data['is_premium_1'].iloc[0] == 1 else 'HayÄ±r'}")
            st.write(f"- PopÃ¼ler Renk: {'Evet' if input_data['is_popular_color_1'].iloc[0] == 1 else 'HayÄ±r'}")
            st.write(f"- AraÃ§ Durumu: {title_status}")

except Exception as e:
    st.error(f"Bir hata oluÅŸtu: {str(e)}")
    st.error("LÃ¼tfen tÃ¼m deÄŸerleri doÄŸru ÅŸekilde giriniz.")
