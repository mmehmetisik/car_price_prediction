import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os

# Uygulama KonfigÃ¼rasyonu
st.set_page_config(
   page_title="AraÃ§ Fiyat Tahmini",
   page_icon="ğŸš—",
   layout="wide"
)

# Model, scaler ve feature columns yÃ¼kleme
model_path = os.path.join('models', 'final_model.pkl')
with open(model_path, 'rb') as file:
   model = pickle.load(file)

feature_columns_path = os.path.join('models', 'feature_columns.pkl')
with open(feature_columns_path, 'rb') as file:
   feature_columns = pickle.load(file)

scaler_path = os.path.join('models', 'scaler.pkl')
with open(scaler_path, 'rb') as file:
   scaler = pickle.load(file)

# Ana baÅŸlÄ±k
st.title('ğŸš— AraÃ§ Fiyat Tahmini')
st.markdown("---")

# Yan panel (sidebar) iÃ§in aÃ§Ä±klama
st.sidebar.header("Uygulama HakkÄ±nda")
st.sidebar.markdown("""
### AraÃ§ Fiyat Tahmin Sistemi

Bu uygulama, geliÅŸmiÅŸ makine Ã¶ÄŸrenmesi algoritmalarÄ± kullanarak araÃ§ fiyat tahmini yapar.

**Ã–zellikler:**
- GerÃ§ek piyasa verilerine dayalÄ± tahminler
- 50'den fazla Ã¶zellik analizi
- AnlÄ±k fiyat hesaplama
- DetaylÄ± araÃ§ Ã¶zellikleri analizi

**Veri KaynaÄŸÄ±:** 
- USA Cars Dataset
- 2,500+ araÃ§ verisi
- GÃ¼ncel piyasa analizi
""")

# Ana panel - KullanÄ±cÄ± girdileri
st.header('AraÃ§ Ã–zelliklerini Giriniz')

# 2 sÃ¼tunlu layout
col1, col2 = st.columns(2)

# Ä°lk sÃ¼tun
with col1:
   brand = st.selectbox('Marka', ['ford', 'chevrolet', 'toyota', 'honda', 'bmw', 'nissan', 'dodge', 'mercedes-benz'])
   year = st.slider('Model YÄ±lÄ±', 2000, 2024, 2020)
   mileage = st.number_input('Kilometre', min_value=0, max_value=300000, value=50000, step=1000)

# Ä°kinci sÃ¼tun
with col2:
   color = st.selectbox('Renk', ['white', 'black', 'silver', 'gray', 'blue', 'red'])
   title_status = st.selectbox('AraÃ§ Durumu', ['clean vehicle', 'salvage insurance loss'])
   state = st.selectbox('Eyalet', ['california', 'florida', 'texas', 'new york', 'pennsylvania'])

# Tahmin butonu
if st.button('Fiyat Tahmini Yap', type='primary'):
   try:
       # Ä°lk DataFrame oluÅŸturma
       input_data = pd.DataFrame(index=[0])
       
       # NÃ¼merik Ã¶zellikleri ekle
       input_data['year'] = year
       input_data['mileage'] = mileage
       input_data['car_age'] = 2024 - year
       input_data['avg_km_per_year'] = mileage / input_data['car_age']
       input_data['price_per_km'] = 0.5  # VarsayÄ±lan deÄŸer
       
       # NÃ¼merik deÄŸerleri Ã¶lÃ§eklendir
       numeric_cols = ['year', 'mileage', 'car_age', 'avg_km_per_year', 'price_per_km']
       input_data[numeric_cols] = scaler.transform(input_data[numeric_cols])
       
       # DiÄŸer Ã¶zellikleri ekle
       # Brand encoding
       brand_cols = [col for col in feature_columns if col.startswith('brand_')]
       for col in brand_cols:
           brand_name = col.split('_')[1]
           input_data[col] = 1 if brand == brand_name else 0
           
       # Title status encoding
       input_data['title_status_clean vehicle'] = 1 if title_status == 'clean vehicle' else 0
       
       # Color encoding
       color_cols = [col for col in feature_columns if col.startswith('color_')]
       for col in color_cols:
           color_name = col.split('_')[1]
           input_data[col] = 1 if color == color_name else 0
           
       # State encoding
       state_cols = [col for col in feature_columns if col.startswith('state_')]
       for col in state_cols:
           state_name = col.split('_')[1]
           input_data[col] = 1 if state == state_name else 0
           
       # Price segment ve mileage segment (varsayÄ±lan deÄŸerler)
       segment_cols = [col for col in feature_columns if col.startswith('price_segment_') or col.startswith('mileage_segment_')]
       for col in segment_cols:
           input_data[col] = 0
           
       # Premium marka ve popular color flag'leri
       input_data['is_premium_1'] = 1 if brand in ['bmw', 'mercedes-benz'] else 0
       input_data['is_popular_color_1'] = 1 if color in ['white', 'black', 'silver', 'gray'] else 0
       input_data['clean_title_score_1'] = 1 if title_status == 'clean vehicle' else 0
       
       # Feature sÄ±rasÄ±nÄ± dÃ¼zenle
       final_input = input_data[feature_columns]
       
       # Tahmin
       prediction = model.predict(final_input)[0]
       
       # SonuÃ§ gÃ¶sterimi
       st.success(f'Tahmini Fiyat: ${prediction:,.2f}')
       
       # DetaylÄ± aÃ§Ä±klama
       st.markdown("---")
       st.markdown("### FiyatÄ± Etkileyen FaktÃ¶rler")
       col1, col2 = st.columns(2)
       
       with col1:
           st.write(f"- AraÃ§ YaÅŸÄ±: {2024 - year} yÄ±l")
           st.write(f"- Kilometre: {mileage:,} km")
           st.write(f"- Premium Marka: {'Evet' if brand in ['bmw', 'mercedes-benz'] else 'HayÄ±r'}")
           
       with col2:
           st.write(f"- Durum: {title_status}")
           st.write(f"- Lokasyon: {state}")
           st.write(f"- Renk: {color}")
           
   except Exception as e:
       st.error(f"Bir hata oluÅŸtu: {str(e)}")
       st.error("LÃ¼tfen tÃ¼m alanlarÄ± doÄŸru ÅŸekilde doldurunuz.")
